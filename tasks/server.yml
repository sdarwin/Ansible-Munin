---
# - name: Include OS-specific variables.
#   include_vars: "{{ ansible_os_family }}.yml"

- name: Check if EPEL repo is already configured.
  ansible.builtin.stat:
    path: "{{ epel_repofile_path }}"
  register: epel_repofile_result
  when: ansible_os_family == 'RedHat'

- name: Install EPEL repo.
  ansible.builtin.yum:
    name: "{{ epel_repo_url }}"
    state: present
  register: result
  until: result.rc == 0
  retries: 5
  delay: 10
  when: ansible_os_family == 'RedHat' and not epel_repofile_result.stat.exists

- name: Import EPEL GPG key.
  ansible.builtin.rpm_key:
    key: "{{ epel_repo_gpg_key_url }}"
    state: present
  when: ansible_os_family == 'RedHat' and not epel_repofile_result.stat.exists

# To enable powertools, see next step
- name: Install dnf-plugins-core
  ansible.builtin.yum:
    name: dnf-plugins-core
    state: present
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version|int > 7

# For certain Perl modules to be available
- name: Install powertools
  ansible.builtin.command: dnf config-manager --set-enabled powertools
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version|int > 7
  changed_when: false

- name: Install required packages for munin (RedHat).
  ansible.builtin.yum:
    name: "{{ munin_packages }}"
    state: present
  when: ansible_os_family == 'RedHat'

- name: Install required packages for munin (Debian).
  ansible.builtin.apt:
    name: "{{ munin_packages }}"
    state: present
  when: ansible_os_family == 'Debian'

- name: Install passlib
  ansible.builtin.package:
    name:
      - python3-passlib
    state: present

- name: Create cert (Redhat)
  ansible.builtin.shell: "{{ make_dummy_cert_path }} {{ munin_ssl_cert }} ; chmod 640 {{ munin_ssl_cert }} ; chgrp {{ munin_web_user }} {{ munin_ssl_cert }}"
  args:
    creates: "{{ munin_ssl_cert }}"
  when:
    - ansible_os_family == "RedHat"
    - munin_https == "enabled"

- name: Create key (Redhat)  # noqa no-free-form
  ansible.builtin.shell: mkdir -p /etc/ssl/private ; cp -p {{ munin_ssl_cert }} {{ munin_ssl_key }}
  args:
    creates: "{{ munin_ssl_key }}"
  when:
    - ansible_os_family == "RedHat"
    - munin_https == "enabled"

- name: Install apache
  ansible.builtin.import_tasks: server_apache.yml
  when: munin_web_server == "apache2"

- name: Install nginx
  ansible.builtin.import_tasks: server_nginx.yml
  when: munin_web_server == "nginx"

- name: Create conf_d dir if missing
  ansible.builtin.file:
    path: "{{ munin_conf_d_directory }}"
    state: directory
    mode: "0755"

- name: Copy munin configurations.
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: "0644"
  with_items:
    - src: munin.conf.j2
      dest: /etc/munin/munin.conf
    - src: hosts.conf.j2
      dest: "{{ munin_conf_d_directory }}/hosts.conf"

- name: Set htpasswd for gui users
  community.general.htpasswd:
    path: /etc/munin/htpasswd.users
    name: "{{ item.user }}"
    password: "{{ item.pass }}"
    state: present
    owner: root
    group: root
    mode: "0644"
  with_items: "{{ munin_users | default([]) }}"

- name: Set htpasswd for gui users from users variable
  community.general.htpasswd:
    crypt_scheme: plaintext
    path: /etc/munin/htpasswd.users
    name: "{{ item.username }}"
    password: "{{ item.htpasswd }}"
    state: present
    owner: root
    group: root
    mode: "0644"
  when: munin_admins_group in item.groups
  with_items: "{{ users | default([]) }}"
  changed_when: false

- name: Install cron
  ansible.builtin.template:
    src: cron.redhat.j2
    dest: /etc/cron.d/munin
    owner: root
    group: root
    mode: "0644"
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version|int > 6

- name: Enable or disable the munin cron job.  # noqa args[module]
  ansible.builtin.lineinfile:
    dest: /etc/cron.d/munin
    state: "{{ munin_cron_job }}"
    regexp: ^\*/5 \* \* \* \*
    line: "*/5 * * * *     munin test -x /usr/bin/munin-cron && /usr/bin/munin-cron"
